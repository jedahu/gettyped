#+TITLE: Maybe - null done right
#+AUTHOR: Jeremy Hughes
#+EMAIL: jedahu@gmail.com
#+DATE: [2017-07-08 Sat]

* Motivation

- Handle optional values without guessing and without exceptions
- Maintain type invariants in smart constructors

The ~Maybe~ type guarantees exception free and guess free optional value handling
by providing only one function for getting at the optional value, a function
that requires function arguments that handle both present and absent states.

* Info
- type :: ~Maybe<A>~
- impl :: [[https://hackage.haskell.org/package/base/docs/Data-Maybe.html][Haskell]]([[https://hackage.haskell.org/package/base/docs/src/Data.Maybe.html][src]]), [[https://doc.rust-lang.org/std/option/][Rust]]([[https://doc.rust-lang.org/src/core/up/src/libcore/option.rs.html][src]]), [[https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/core.option-module-%5Bfsharp%5D][F#]]([[https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/option.fs][src]])
- docs :: [[https://wiki.haskell.org/Maybe][Haskell wiki]], [[https://fsharpforfunandprofit.com/posts/the-option-type/][F# post]], [[https://en.wikipedia.org/wiki/Option_type][Wikipedia]]

* Minimal API

- A nullary constructor
- A 1-ary constructor
- A function that folds over the constructor cases

#+BEGIN_SRC ts
class Maybe<A> {
    static nothing : Maybe<A>;

    static just(a : A) : Maybe<A>;

    fold<B>(nothing : () => B, just : (A) => B) : B;
}
#+END_SRC

This API provides no way to dereference the Maybe-wrapped value directly. ~fold~
ensures that the ~Nothing~ case is handled.

* Minimal implementation

#+BEGIN_SRC ts :module maybe-minimal :hide t
export class Maybe<A> {
    static nothing<A>() : Maybe<A> {
        return new Maybe<A>(null);
    }

    static just<A>(a : A) : Maybe<A> {
        return new Maybe({just: a});
    }

    fold<B>(nothing: () => B, just: (a:A) => B): B {
        return this.value === null ? nothing() : just(this.value.just);
    }

    private readonly value : null | {just : A};

    private constructor(value : null | {just : A}) {
        this.value = value;
    }

    protected [Symbol.species] : "f419bf14-c1e9-43f5-92c3-ac944652e72b";
}
#+END_SRC

* Maybe vs null

Assuming the following values:

#+BEGIN_SRC ts :module name
export class Name {
    first : string;
    last : string;

    constructor(first : string, last : string) {
        this.first = first;
        this.last = last;
    }
}

export const absent = () : string => "nobody\n";
export const present = (n : Name) : string => `${n.first} ${n.last}\n`;
#+END_SRC

A typical null-check,
#+BEGIN_SRC ts :module typical-check
import * as t from "name";

const line = (n : t.Name|null) : string =>
      n === null ? t.absent() : t.present(n);

const a = line(new t.Name("Isaac", "Newton"));
const b = line(null);
console.log(a + b);
#+END_SRC

exhibits a lack of type safety in two ways:

*Assumption.* The programmer assumes ~n~ is not ~null~ and doesn’t write the null
check.

#+BEGIN_SRC ts :module assume-not-null :error runtime
import * as t from "name";

const line = (n : t.Name|null) : string =>
      t.present(n as t.Name);

const a = line(new t.Name("Bertram", "Russell"));
const b = line(null);
console.log(a + b);
#+END_SRC

*Boolean blindness.* The compiler doesn’t stop accidental dereferencing, as in
this transposition.
#+BEGIN_SRC ts :module accidental-dereference :error runtime
import * as t from "name";

const line = (n : t.Name|null) : string =>
      n === null ? t.present(n as any as t.Name) : t.absent();

const a = line(new t.Name("Kurt", "Godel"));
const b = line(null);
console.log(a + b);
#+END_SRC

Boolean blindness is [[bb][well described by Robert Harper]]. Here’s the money quote:

#+LINK: bb https://existentialtype.wordpress.com/2011/03/15/boolean-blindness/
     
#+BEGIN_QUOTE
Another harm is the condition of Boolean blindness alluded to earlier. Suppose
that I evaluate the expression e=e’ to test whether e and e’ are equal. I have
in my hand a bit. The bit itself has no intrinsic meaning; I must associate a
provenance with that bit in order to give it meaning. “This bit being true
means that e and e’ are equal, whereas this other bit being false means that
some other two expressions are not equal.” Keeping track of this information
(or attempting to recover it using any number of program analysis techniques) is
notoriously difficult. The only thing you can do with a bit is to branch on it,
and pretty soon you’re lost in a thicket of if-the-else’s, and you lose track
of what’s what. Evolve the program a little, and you’re soon out to sea, and
find yourself in need of sat solvers to figure out what the hell is going on.
#+END_QUOTE

~Maybe~ solves both issues.
#+BEGIN_SRC ts :module solved
import * as m from "maybe-minimal";
import * as t from "name";

const line = (n : m.Maybe<t.Name>) : string =>
      n.fold(t.absent, t.present);

const a = line(m.Maybe.just(new t.Name("Q", "Cantor")));
const b = line(m.Maybe.nothing<t.Name>());
console.log(a + b);
#+END_SRC

*Assumption.* The programmer cannot get at the value of a ~Maybe~ without going
through ~Maybe.fold~.
#+BEGIN_SRC ts :module forced-to-handle :error static
import * as m from "maybe-minimal";
import * as t from "name";

const line = (n : m.Maybe<t.Name>) : string =>
      t.present(n);

const a = line(m.Maybe.just(new t.Name("Lewis", "Caroll")));
const b = line(m.Maybe.nothing<t.Name>());
console.log(a + b);
#+END_SRC

*Boolean blindness.* ~Maybe.fold~ provides a value only to the ~just~ case, so
accidental transposition results in a compile time error:
#+BEGIN_SRC ts :module transposition-error :error static
import * as m from "maybe-minimal";
import * as t from "name";

const line = (n : m.Maybe<t.Name>) : string =>
      n.fold(t.present, t.absent)

const a = line(m.Maybe.just(new t.Name("Lewis", "Caroll")));
const b = line(m.Maybe.nothing<t.Name>());
console.log(a + b);
#+END_SRC
